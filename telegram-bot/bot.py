import sqlite3
import os
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import logging

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = "8373273491:AAHKUfwPB2OYTfgejrz8Pbpim-NepdD--EU"

def init_db():
    conn = sqlite3.connect('keys.db')
    c = conn.cursor()
    
    c.execute('''CREATE TABLE IF NOT EXISTS keys
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  key_value TEXT UNIQUE NOT NULL,
                  taken BOOLEAN DEFAULT FALSE,
                  taken_by TEXT,
                  taken_by_username TEXT,
                  taken_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    
    initial_keys = [
        "URru0x61",
        "URru0x62",
        "URru0x63",
        "URru0x64",
        "URru0x65",
        "URru0x66",
        "URru0x67",
        "URru0x68",
        "URru0x69",
        "URru0x6A"
    ]
    
    for key in initial_keys:
        try:
            c.execute("INSERT OR IGNORE INTO keys (key_value) VALUES (?)", (key,))
        except:
            pass
    
    conn.commit()
    conn.close()
    logger.info("Database initialized with keys")

def get_available_key(user_id, username):
    conn = sqlite3.connect('keys.db')
    c = conn.cursor()
    
    c.execute("SELECT key_value FROM keys WHERE taken_by = ?", (str(user_id),))
    existing_key = c.fetchone()
    
    if existing_key:
        conn.close()
        return None, "already_claimed"
    
    c.execute("SELECT key_value FROM keys WHERE taken = FALSE LIMIT 1")
    available_key = c.fetchone()
    
    if available_key:
        display_username = f"@{username}" if username else f"User {user_id}"
        c.execute("UPDATE keys SET taken = TRUE, taken_by = ?, taken_by_username = ? WHERE key_value = ?", 
                 (str(user_id), display_username, available_key[0]))
        conn.commit()
        conn.close()
        return available_key[0], "success"
    else:
        conn.close()
        return None, "no_keys"

def get_stats():
    conn = sqlite3.connect('keys.db')
    c = conn.cursor()
    c.execute("SELECT COUNT(*) FROM keys")
    total = c.fetchone()[0]
    c.execute("SELECT COUNT(*) FROM keys WHERE taken = TRUE")
    taken = c.fetchone()[0]
    conn.close()
    return total, taken

def get_admin_stats():
    conn = sqlite3.connect('keys.db')
    c = conn.cursor()
    
    c.execute("SELECT COUNT(*) FROM keys")
    total = c.fetchone()[0]
    c.execute("SELECT COUNT(*) FROM keys WHERE taken = TRUE")
    taken = c.fetchone()[0]
    available = total - taken
    
    c.execute("""
        SELECT key_value, taken_by_username, taken_at 
        FROM keys 
        WHERE taken = TRUE 
        ORDER BY taken_at DESC 
        LIMIT 10
    """)
    recent_keys = c.fetchall()
    
    c.execute("""
        SELECT taken_by_username, COUNT(*) 
        FROM keys 
        WHERE taken = TRUE 
        GROUP BY taken_by_username 
        ORDER BY COUNT(*) DESC
    """)
    user_distribution = c.fetchall()
    
    conn.close()
    
    return total, taken, available, recent_keys, user_distribution

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç {user.first_name}!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ä–∞–∑–¥–∞—á–∏ –∫–ª—é—á–µ–π!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /getkey —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è —Å–∞–π—Ç–∞.\n"
        "–ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–ª—é—á.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /status —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–¥–∞—á–∏."
    )

async def get_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    username = user.username
    key, status = get_available_key(user.id, username)
    
    if status == "success":
        await update.message.reply_text(
            f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º {user.first_name}!\n\n"
            f"–í–∞—à –∫–ª—é—á: `{key}`\n\n"
            "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ!\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!",
            parse_mode='Markdown'
        )
        logger.info(f"Key {key} given to user {user.id} (@{username})")
        
    elif status == "already_claimed":
        conn = sqlite3.connect('keys.db')
        c = conn.cursor()
        c.execute("SELECT key_value FROM keys WHERE taken_by = ?", (str(user.id),))
        existing_key = c.fetchone()
        conn.close()
        
        if existing_key:
            await update.message.reply_text(
                f"–ü—Ä–∏–≤–µ—Ç {user.first_name}!\n\n"
                f"–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –∫–ª—é—á: `{existing_key[0]}`\n\n"
                "–ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–ª—é—á.\n\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ [–ø–æ–¥–¥–µ—Ä–∂–∫—É](https://echobreak.space/contact.html).",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                f"–ü—Ä–∏–≤–µ—Ç {user.first_name}!\n\n"
                "–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –∫–ª—é—á —Ä–∞–Ω–µ–µ!\n\n"
                "–ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–ª—é—á."
            )
    else:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ! –í—Å–µ –∫–ª—é—á–∏ —É–∂–µ —Ä–æ–∑–¥–∞–Ω—ã.\n\n"
            "–£ –Ω–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫–ª—é—á–∏ –¥–ª—è —ç—Ç–æ–π —Ä–∞–∑–¥–∞—á–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø–æ–∑–∂–µ –¥–ª—è –±—É–¥—É—â–∏—Ö —Ä–∞–∑–¥–∞—á!"
        )

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    total, taken = get_stats()
    available = total - taken
    
    await update.message.reply_text(
        f"–°—Ç–∞—Ç—É—Å —Ä–∞–∑–¥–∞—á–∏ –∫–ª—é—á–µ–π:\n\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: {total}\n"
        f"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ: {taken}\n"
        f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: {available}\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /getkey —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á."
    )

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ADMIN_IDS = [5640730039, 5972150615]
    
    user = update.effective_user
    
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        total, taken, available, recent_keys, user_distribution = get_admin_stats()
        
        message = "**–ê–î–ú–ò–ù –°–¢–ê–¢–ò–°–¢–ò–ö–ê**\n\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: {total}\n"
        message += f"‚Ä¢ –í—ã–¥–∞–Ω–æ: {taken}\n"
        message += f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: {available}\n"
        message += f"‚Ä¢ –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å: {(taken/total)*100:.1f}%\n\n"
        
        message += "üë• **–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:**\n"
        for username, count in user_distribution[:10]:
            message += f"‚Ä¢ {username}: {count} –∫–ª—é—á(–µ–π)\n"
        
        message += "\n**–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–¥–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏:**\n"
        for key in recent_keys[:10]:
            key_value, username, taken_at = key
            short_time = taken_at.split(' ')[1][:8] if taken_at else 'N/A'
            message += f"‚Ä¢ `{key_value}` ‚Üí {username} –≤ {short_time}\n"
        
        await update.message.reply_text(message, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in admin_stats: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    ADMIN_IDS = [5640730039, 5972150615]

    help_text = "**–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**\n\n"
    help_text += "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
    help_text += "/getkey - –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á\n"
    help_text += "/status - –°—Ç–∞—Ç—É—Å —Ä–∞–∑–¥–∞—á–∏\n"
    
    if user.id in ADMIN_IDS:
        help_text += "/admin - –ê–¥–º–∏–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
    
    help_text += "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
    help_text += "–ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–ª—é—á.\n"
    help_text += "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ [–ø–æ–¥–¥–µ—Ä–∂–∫—É](https://echobreak.space/contact.html)."
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

def main():
    init_db()
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("getkey", get_key))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("admin", admin_stats))
    application.add_handler(CommandHandler("help", help_command))
    
    logger.info("Starting Telegram bot...")
    print("Bot is running! Press Ctrl+C to stop.")
    
    application.run_polling()

if __name__ == '__main__':
    main()